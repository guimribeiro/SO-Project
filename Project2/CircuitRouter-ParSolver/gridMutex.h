#include <stdio.h>
#include <pthread.h>
#include "grid.h"
#include "lib/types.h"
#include "lib/vector.h"


typedef struct grid_mutex {
    long width;
    long height;
    long depth;
    pthread_mutex_t* mutexes;
} grid_mutex_t;
/* =============================================================================
 * grid_mutex_alloc
 * =============================================================================
 */
grid_mutex_t* grid_mutex_alloc (long width, long height, long depth);


/* =============================================================================
 * grid_mutex_free
 * =============================================================================
 */
void grid_mutex_free (grid_mutex_t* gridPtr);


/* =============================================================================
 * grid_getMutex
 * =============================================================================
 */
pthread_mutex_t* grid_getMutex (grid_mutex_t* gridPtr, long x, long y, long z);


/* =============================================================================
 * grid_pointRefToMutex
 * =============================================================================
 */
pthread_mutex_t* grid_pointRefToMutex (grid_t* gridPtr, grid_mutex_t* gridMutexPtr, long* gridPointPtr);


/* =============================================================================
 * grid_mutex_lock
 * =============================================================================
 */
void grid_mutex_lock (grid_mutex_t* gridPtr, long x, long y, long z);


/* =============================================================================
 * mutex_unlock
 * =============================================================================
 */
void mutex_unlock (pthread_mutex_t* mutex);


/* =============================================================================
 * mutex_unlock
 * =============================================================================
 */
void mutex_lock (pthread_mutex_t* mutex);


/* =============================================================================
 * mutex_destroy
 * =============================================================================
 */
void mutex_destroy (pthread_mutex_t* mutex);


/* =============================================================================
 * mutex_init
 * =============================================================================
 */
void mutex_init (pthread_mutex_t* mutex);


/* =============================================================================
 * barrier_init
 * =============================================================================
 */
void barrier_init (pthread_barrier_t* pthread_barrier, unsigned nthreads);


/* =============================================================================
 * barrier_wait
 * =============================================================================
 */
void barrier_wait (pthread_barrier_t* pthread_barrier);


/* =============================================================================
 * barrier_destroy
 * =============================================================================
 */
void barrier_destroy (pthread_barrier_t* pthread_barrier);


/* =============================================================================
 * mutex_trylock
 * =============================================================================
 */
bool_t mutex_trylock (pthread_mutex_t* mutex);


/* =============================================================================
 * grid_mutex_addPath_Ptr
 * =============================================================================
 */
bool_t grid_mutex_addPath_Ptr (grid_t* gridPtr, grid_mutex_t* gridMutexPtr, vector_t* pointVectorPtr);


/* =============================================================================
 * grid_mutex_unlockPath_Ptr
 * =============================================================================
 */
void grid_mutex_unlockPath_Ptr (grid_t* gridPtr, grid_mutex_t* gridMutexPtr, vector_t* pathVectorPtr);


/* =============================================================================
 * backoff
 * =============================================================================
 */
void backoff(long n_attempts);
